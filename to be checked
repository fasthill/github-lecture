 ! [remote rejected] main -> main (permission denied)
error: failed to push some refs to 'https://github.com/fasthill-sibling/hello_python.git'
--> 내용확인하기

Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)
  
  소스를 수정하고 commit 한 후에 리모트 레파지토리에 수정사항이 생겨 다시 pull 받았더니 commit 이 두개로 생성되었다. (Your branch is ahead of 'origin/master' by 2 commits.)
로그를 확인해보니 내가 commit 한 버전 1개와 리모트 소스를 pull 받으면서 생긴 merge commit이 추가로 생긴거였다. 처음부터 merge commit 을 남기지 않으려면 pull 받을때 --rebase 옵션을 주면 생기지 않는다고 한다. (git pull --rebase)
내 경우에는 이미 merge commit이 생겨버려서 reset으로 2번째 전 commit으로 돌아가서 다시 진행했다.

[ 진행순서 ]
$ git commit -m [msg]
$ git pull 
> Your branch is ahead of 'origin/master' by 2 commits. 

[ 해결 ]
$ git reset HEAD^^ (2개 이전까지 commit 취소) > 변경된파일은 그대로 
$ git add .
$ git commit -m [msg]
$ git push origin HEAD:refs/for/master 

[ commit 취소명령 ]
$ git reset HEAD^ : 마지막 커밋 취소 but, 변경한 파일은 그대로 존재 
$ git reset --hard HEAD^ : 마지막 커밋 취소하고 변경전 파일로 복구
$ git reset HEAD~n : 마지막 n개 커밋 취소 but, 변경한 파일은 그대로 존재 
$ git reset --hard HEAD~n : 마지막 n개 커밋 취소하고 변경전 파일로 복구

[ commit amend 옵션 ]
- 코드리뷰 후 수정사항 반영할때 사용 (Change-Id는 유지, Commit-Id는 새로 생성)
- 현재 브랜치의 마지막 커밋을 새로운 커밋으로 대체 (변경이력은 없어지지만 변경된내용은 누적)
$ git commit --amend
$ git push origin master 

참고글 
http://logonluv.blogspot.com/2015/02/git-commit-reset.html

[ branch 생성 ] 
$ git branch [새로운브랜치명]    
$ git checkout -b [새로운브랜치명]    -- 생성 & branch이동

[ branch 체크아웃 ]                        -- 해당 branch로 이동
$ git checkout [브랜치명]

[ branch 삭제 ]
$ git branch -D [브랜치명] 

[ branch 조회 ]
$ git branch -vva

[ branch head 맞추기 ]
$ git stash                -- 기존에 작업하던내용 임시저장
$ git rebase master    -- 리모트소스 내려받기 
$ git stash apply        -- 임시저장한 내용 적용

github 에 프로젝트 등록 방법

먼저 로컬pc 의 작업폴더로 이동해서 차례로 진행 
(git 이 설치돼있다는 가정하에..)

$ git init     -- .git 파일이 생성됨 (ls -a 로 확인가능)
$ git add [파일이름]     -- 전체 파일 등록 시 git add . )
$ git commit -m "comment 내용"
$ git remote add origin [git 저장소 url]
$ git push -u origin master

서버에서 github 프로젝트 다운로드
git 설치 후
$ git clone [ git 저장소 ] 

서버에서 github 소스 다운로드
$ git pull

-- 로컬저장소의 Commit 히스토리를 시간순으로 조회
$ git log

-- git log 결과값 
commit ca82a6dff817ec66f44342007202690a93763949      -- SHA-1 체크섬값
Author: Scott Chacon <schacon@gee-mail.com>             -- commit한 계정
Date:   Mon Mar 17 21:52:11 2008 -0700                       -- commit 날짜 
    changed the version number                                   -- commit 메세지

-- 최근 2개 commit 비교 (diff)
$ git log -p -2 

-- log 히스토리 통계 조회 (변경파일개수 등)
$ git log --stat

-- oneline은 커밋내용을 한줄로 요약해서 조회 > commit 내역 한꺼번에 볼때 
$ git log --pretty=[oneline | short | full | fuller]

이밖에도 날짜, 파일, 작성자, 커밋메세지 별로 조회가 가능 > 차근차근 찾아봐야겠당

Reset이나 Revert는 특정시점 이전으로 돌아가는 명령어이다.
차이점은 reset은 특정시점으로 돌아갈때 이력을 남기지 않고 revert는 특정시점으로 돌아가는 revert 명령자체도 이력으로 남긴다는 점이다.

[ ORIG_HEAD ]
reset 전의 커밋은  'ORIG_HEAD'라는 이름으로 참조할 수 있다. 실수로 reset 한 경우에 ORIG_HEAD로 reset 하여 이전버전으로 되돌릴수있다.
$ git reset --hard ORIG_HEAD

-----------------------------------------https://velog.io/@eunsonny/Git-rebase%EB%9E%80---
git rebase란?
Git에서 한 branch에서 다른 branch 합치는 방법 중 하나로, 말 그대로 main을 초기의 main이 아닌 업데이트 된 main으로 rebase하여 commit 내역을 깔끔하게 관리할 수 있는 방법이다.

git merge와 rebase의 차이점
Git에서 한 브랜치에서 다른 브랜치로 합치는 방법은 Merge와 Rebase다.
Merge와 Rebase의 실행결과는 같지만 커밋 히스토리가 달라진다.
Merge는 쉽고 안전하지만 커밋히스토리가 지저분할 수 있다 반면 Rebase는 잘 모르고 사용할 경우 위험할 수 있어 까다롭지만 커밋히스토리를 깔끔하게 관리할 수 있다.

Rebase는 base를 새롭게 설정한다는 의미로 이해하면 좋다.
$ git rebase [newbase]
그럼 두 개의 브랜치로 나뉘어진 커밋 히스토리가 있는 상황에서 Merge 와 Rebase를 비교해 본 후 Rebase에 대해 좀 더 자세히 알아보겠습니다.

Rebase와 Merge의 차이점
Merge로 통합하기
이 두 브랜치를 합치는 가장 쉬운 방법은 merge 명령을 이용해 3-way Merge로 새로운 커밋을 만들어내는 것입니다.
이 때 내부적으로 공통조상인 C2를 이용하게 됩니다.

Rebase로 통합하기
두 브랜치가 나뉘어 있는 아까와 같은 상황에서 시작합니다.

experiment 브랜치로 이동해 master를 base삼아 Rebase 하겠다는 의미입니다.

$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
그러면 내부에서는 master가 base가 되고, C3과 C4의 차이를 임시 저장하는 공간에 저장합니다. 이 임시저장 공간을 Patch라고 합니다.

그리고 base가 되는 master에 Patch들이 적용됩니다. (이렇게 생각하는 편이 개인적으로 이해하기 좋다고 생각해 적었습니다.)

다시 정리하겠습니다.

공통 커밋(C2)에서 시작해서 현재 체크아웃한 experiment 브랜치가 가리키는 커밋까지 diff를 차례대로 만들어 Patch에 저장
experiment브랜치가 master브랜치를 가리키게 함
C3에 Patch를 순서대로 적용

아까 Merge와 다른점이 눈에 확연히 보입니다!
커밋들이 여러갈래로 있었던 Merge와 다르게 커밋 히스토리가 한 줄로 깔끔하게 정렬된 것을 볼 수 있습니다.

이제 마지막으로 master브랜치를 Fast-forward 시킵니다.

$ git checkout master
$ git merge experiment

Merge의 결과에서의 C5가 위 사진의 C4'는 내용이 같습니다.
결과적으로 봤을 때는 서로 다를게 없습니다. 하지만 Rebase가 좀 더 깨끗한 히스토리를 만듭니다.
Rebase는 그래서 보통 리모트 브랜치에 커밋을 깔끔하게 적용하고 싶을 때 사용합니다.
또 다른 차이점은 Rebase는 브랜치의 변경사항 Patch를 이용한다는 점, Merge의 경우는 두 브랜치의 최종 결과만을 가지고 합친다는 점입니다.

Rebase 활용
아래의 상황을 가정해보겠습니다.

Release된 master브랜치
개발중인 server브랜치
개발중인 client브랜치
이렇게 세 브랜치가 있습니다.
그런데 client 브랜치를 급하게 릴리즈버전에 업데이트 한다고 할 때, C8과 C9는 Merge되어야 합니다.
이런 경우 server브랜치와 server커밋 히스토리에 영향을 주지않고 Rebase할 수 있는 옵션이 있습니다.

$ git rebase --onto master server client
git rebase --onto [newbase][upstream] [branch] 의 형식입니다.

newbase인 master
upstream 과 branch의 공통조상 C3
대상 브랜치인 client
이 세개를 이용한 명령입니다.

이번에도 역시 Fast-forward 시켜줍니다.

$ git checkout master
$ git merge client

성공적으로 client브랜치의 수정사항을 master브랜치에 적용했습니다.
마지막으로 serve도 포함시킵니다.

$ git rebase master server
$ git checkout master
$ git merge server

필요없어진 브랜치 client와 server를 삭제합니다.

커밋 히스토리가 직렬로 깔끔하게 정리된 걸 볼 수 있습니다

Rebase의 위험성
협업을 하고있고 언제 사용할지 모르겠다면 push하기전에만 rebase를 사용하세요!

이미 공개해서 사람들이 사용하는 커밋을 Rebase하면 반드시 문제가 생긴다는 것입니다.
협업 없이 혼자 사용하는 경우는 문제될 것이 없습니다.
git pull 명령을 실행할 때 기본적으로 --rebase 옵션이 적용되도록 pull.rebase 설정을 추가할 수 있습니다. git config --global pull.rebase true 명령으로 추가합니다.
여기까지 입니다.
시리즈에 포스팅한 내용들은 Github을 사용하기 전에 알면 좋을 Git에 대한 내용 정리였습니다.

다음 포스팅은 Github에서의 협업 워크플로를 위해 사용하는 Pull Request에 대해 알아보게습니다.

Rebase 꼭 참조할 사이트 :  https://victorydntmd.tistory.com/78

upstream 내용 : https://blog.naver.com/PostView.nhn?blogId=whdgml1996&logNo=221725149336&from=search&redirect=Log&widgetTypeCall=true&directAccess=false
