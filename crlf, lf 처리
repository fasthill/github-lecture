git config --global core.autocrlf input
# Set this setting on OSX or Linux

git config --global core.autocrlf true
# Set this setting on Windows
--------------------------------------------------------
FYI., By default, Line ending in Windows will take CRLF and Linux will take LF. Please find the below table for clear understanding.

╔═══════════════╦══════════════╦══════════════╦══════════════╗
║ core.autocrlf ║    false     ║    input     ║    true      ║
║               ║ Win => Unix  ║ Win => Unix  ║ Win => Unix  ║
╠═══════════════╬══════════════╬══════════════╬══════════════╣
║   git commit  ║ LF => LF     ║ LF => LF     ║ LF => LF     ║
║               ║ CR => CR     ║ CR => CR     ║ CR => CR     ║
║               ║ CRLF => CRLF ║ *CRLF => LF  ║ *CRLF => LF  ║
╠═══════════════╬══════════════╬══════════════╬══════════════╣
║  git checkout ║ LF => LF     ║ LF => LF     ║ *LF => CRLF  ║
║               ║ CR => CR     ║ CR => CR     ║ CR => CR     ║
║               ║ CRLF => CRLF ║ CRLF => CRLF ║ CRLF => CRLF ║
╚═══════════════╩══════════════╩══════════════╩══════════════╝
Expand snippet
In the above tabular information, the symbol * highlights the differences between Windows and Unix. 
At a glance, below is the CLRF information based on the OS platforms:

For Windows users
   If windows users working with cross-platform projects, 
   It MUST be core.autocrlf=true for Windows machines and core.autocrlf=input for Unix machines.
   
   If windows users work with Only Windows projects, It can be both core.autocrlf=true or core.autocrlf=false. 
   But core.autocrlf=input will result in issues in this case.
   
For Unix users (Linux / Mac OS)
   If Unix users working with cross-platform projects, 
   It MUST be core.autocrlf=true for Windows machines and core.autocrlf=input for Unix machines.
   
   If Unix users work with Only Unix projects, It can be both core.autocrlf=input or core.autocrlf=false. 
   But core.autocrlf=true will result in issues in this case.
   
For same OS users
   For a pure Windows project or pure Unix project, it can be core.autocrlf=false.

출처 : https://stackoverflow.com/questions/4181870/git-on-windows-what-do-the-crlf-settings-mean
---------------------------------------------------------

https://stackoverflow.com/questions/2517190/how-do-i-force-git-to-use-lf-instead-of-crlf-under-windows/13154031#13154031

[Git] warning: LF will be replaced by CRLF in README.md.

원인
운영체제에 따라서 다른 개행문자를 사용하고 나중에 이것으로 추후 문제가 생길 수 있기 때문입니다.
 
운영체제 별 사용하는 개행문자
유닉스 / 리눅스 : "LF"로 개행문자를 사용
윈도우 : "CRLF"형식으로 개행문자를 사용

출처: https://somjang.tistory.com/entry/GIT-warning-LF-will-be-replaced-by-CRLF-in-READMEmd [솜씨좋은장씨]

맥/리눅스 이용 개발자와 윈도우 개발자가 협업할 때

왜 발생할까?

터미널에 git 명령어를 입력했는데 다음과 같은 에러가 뜨는 경우가 있다:

warning: CRLF will be replaced by LF in some/file.file.
The file will have its original line endings in your working directory.
이는 맥 또는 리눅스를 쓰는 개발자와 윈도우 쓰는 개발자가 Git으로 협업할 때 발생하는 Whitespace 에러다. 
유닉스 시스템에서는 한 줄의 끝이 LF(Line Feed)로 이루어지는 반면, 
윈도우에서는 줄 하나가 CR(Carriage Return)와 LF(Line Feed), 
즉 CRLF로 이루어지기 때문이다. 따라서 어느 한 쪽을 선택할지 Git에게 혼란이 온 것이다.

유닉스 OS을 쓰고 있다면 CRLF will be replaced by LF in… 에러 메시지가 뜰 것이고, 
윈도우를 사용하고 있다면 LF will be replaced by CRLF in… 에러 메시지가 뜰 것이다.

둘 중 뭐든간에 해결 방법은 같다. Git은 똑똑해서 이를 자동 변환해주는 
core.autocrlf 라는 기능을 가지고 있는데, 이 기능을 켜주기만 하면 된다.

해답은 core.autocrlf 를 켜는 것!

이 기능은 개발자가 git에 코드를 추가했을 때 (예컨대 커밋할 때)에는 CRLF를 LF로 변환해주고, 
git의 코드를 개발자가 조회할 때 (예컨대 clone한다거나 할 때)에는 LF를 CRLF로 변환해준다.

그러므로 윈도우 사용자의 경우 이러한 변환이 항상 실행되도록 다음과 같은 명령어를 입력한다. 
물론 시스템 전체가 아닌 해당 프로젝트에만 적용하고 싶다면 —global 을 빼주면 된다.

git config --global core.autocrlf true
리눅스나 맥을 사용하고 있는 경우, 조회할 때 LF를 CRLF를 변환하는 것은 원하지 않을 것이다. 
따라서 뒤에 input이라는 명령어를 추가해줌으로써 단방향으로만 변환이 이루어지도록 설정한다.

git config --global core.autocrlf true input
혹은 이러한 변환 기능을 원하지 않고, 그냥 에러 메시지 끄고 알아서 작업하고 싶은 경우에는 
아래 명령어로 경고메시지 기능인 core.safecrlf를 꺼주면 된다.

git config --global core.safecrlf false
출처 : https://blog.jaeyoon.io/2018/01/git-crlf.html

git 에서 CRLF 개행 문자 차이로 인한 문제 해결하기

익히 알다시피 Windows 에서는  line ending으로 CR(Carriage-Return, \r)과 LF(Line Feed, \n)을 
사용하고 Unix 나 Mac OS 는 LF 만 사용한다.

이는 상당히 골치아픈 문제를 발생시킨다. 실제 코드는 변경된 게 없는데 소스의 CR/LF 때문에 변경으로 착각하여 
commit 을 하게 될 수 있으며 변경 로그를 보거나 merge 마다 문제가 될 소지가 있다.

이런 문제를 방지하기 위해 OS 가 달라도 문제가 없도록 crlf 처리 방법을 결정해야 한다.

git 설정 Link to git 설정 
core.eof
git 이 line ending을 어떻게 처리하는지 관련된 항목이다. 세 가지 설정을 할 수 있다.

core.eol = native. 기본 설정. 시스템에서 line ending 을 처리하는 방법에 따른다. windows에서는 CRLF 를 사용하고 Linux, OS X 는 LF 만 사용한다.
core.eol = crlf CRLF 를 line ending 으로 사용한다.
core.eol = lf LF를 line ending 으로 사용한다.
설정은 다음 명령어로 수행할 수 있다.

## 설정
$  git config --global core.eol native
 
## 설정 확인
$ git config --global --list|grep core.eol
Copy

core.autocrlf
git 은 저장소 메타 데이타 디렉터리인 .git 폴더에 모든 이력 데이타를 갖고 있다. 
이력 데이타는 key/value 형식의 데이타베이스이며 core.autocrlf 는 text file 을 
git object database 에 checkin, checkout 할 때 어떻게 처리할지를 설정하는 변수이다. 

다음 세 가지 설정이 가능하다.

core.autocrlf = false. 기본 설정이다. 
        파일에 CRLF 를 썼든 LF 를 썼든 git 은 상관하지 않고 파일 그대로 checkin, checkout 한다. 
        이 설정은 line ending 이 다른 OS 에서는 text file 이 변경되었다고 나오므로 위에서 언급한 여러 가지 문제가 발생할 수 있다.
core.autocrlf = true text file을 object database 에 넣기전에 CRLF 를 LF 로 변경한다.
core.autocrlf = input LF를 line ending 으로 사용한다.


해결책Link to 해결책
방법 #1 - autocrlf 설정 사용
OS 별 CRLF 차이로 인한 문제를 막기 위해 OS 별로 다음과 같이 crlf 처리 방법을 설정하는 걸 권장한다.

Windows
윈도에서는 CRLF 를 사용하므로 저장소에서 가져올 때 LF 를 CRLF 로 변경하고 저장소로 보낼 때는 CRLF 를 LF 로 변경하도록 true 로 설정한다.
git config --global core.autocrlf true

Linux, Mac OS
리눅스, 맥, 유닉스는 LF 만 사용하므로 input 으로 설정한다.
git config --global core.autocrlf input

출처: https://www.lesstif.com/gitbook/git-crlf-20776404.html

Line Feed (LF)
아스키 코드: 16진수로 0A
기능: 커서를 현재 행의 다음 행으로, 즉 아래로 내리기

Carriage Return (CR)
아스키 코드: 16진수로 0D
기능: 커서를 현재 행의 맨 좌측으로 옮기기

프린터나 타자기에서 사용되던 개념인데, 컴퓨터의 텍스트 파일에서도 사용되고 있습니다.
'커서를 아래로 내리는 동작'과 '커서의 행의 맨 앞으로 보내는 동작'을 합치면, 다음 줄로 행갈이가 됩니다.
메모장 등에서, 엔터키를 치면 다음 줄로 내려갑니다. 이때 각 줄의 끝에 바로 이 행갈이 문자가 자동으로 붙습니다.


○ warning: LF will be replaced by CRLF in f2.txt. git add 후에 이런 경고가 나올경우
 1. 'git config --global core.autocrlf input' (git bash 사용할 경우)  ← https://dabo-dev.tistory.com/13
    윈도우 cmd 사용할 경우는 'git config --global core.autocrlf true'
    윈도우가 아닌 linux등과 협업을 위해서는 'git config --global core.autocrlf input'
                                          'git config --global core.safecrlf true'
                                          
    참고 : 메모장 등의 편집기에서 글을 작성할 때, 다음 줄로 넘어가기 위해서는 키보드의 Enter 키를 입력한다. 
    이는 리눅스, 윈도우 할 것 없이 모두 동일하다. 하지만, 내부적으로 처리되는 방식에 있어서는 차이가 있다.
    리눅스와 윈도우는 각각 개행문자를 처리하는 방식이 다르다.
    윈도우의 줄바꿈 문자는 CR + LF 이며, 리눅스는 LF이다.
    CR은 Carriage Return의 약자로, 현재 라인의 시작지점으로 커서를 이동함을 의미한다.
    LF는 Line Feed의 약자로, 다음 라인으로 커서를 이동시킨다.
    
    윈도우는 이 두 문자의 조합으로, 개행을 처리한다. 하지만 리눅스의 경우 CR은 따로 다루지 않으며, LF만으로 개행을 처리한다.
    이는 윈도우에서 작성한 문서를 리눅스에서 열면, CR이 잉여문자로 나타남을 의미하며, 리눅스에서 작성한 문서를 윈도우에서 여는 경우 정상적으로 개행이 되지 않을 수 있음을 의미한다.
    따라서, 리눅스에서 작성한 문서를 윈도우에서 열거나, 혹은 반대의 경우 별도의 처리가 필요하다.
