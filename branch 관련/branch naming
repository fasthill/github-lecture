Gitflow Workflow에서는 항상 유지되는 메인 브랜치들(master, develop)과 
일정 기간 동안만 유지되는 보조 브랜치들(feature, release, hotfix)을 포함하여 총 5가지의 브랜치를 사용한다.

◎ Main branch
중앙 저장소에는 수명이 무한한 두 가지 메인 브랜치가 있다. master 브랜치와 develop 브랜치이다.

1. master branch
제품으로 출시될 수 있는 브랜치
사용자에게 배포 가능한 상태만을 관리한다. 여기서는 배포(release) 이력을 관리하기 위해 사용한다.

2. develop branch
다음 출시 버전을 개발하는 브랜치
기능 개발을 위한 브랜치들을 병합하기 위해 사용한다. 

◎ Supporting branches
우리는 앞으로 다양한 supporting 브랜치를 사용하여 팀 구성원 간에 평행 개발을 할 수 있고, 
기능을 쉽게 추적할 수 있다. 또, 여러 가지 문제도 해결하기 쉬워진다. 
이 supporting 브랜치들은 메인 브랜치와는 달리 결국 제거될 것이기 때문에 항상 제한된 수명을 갖는다.

3. feature branch
기능을 개발하는 브랜치

feature 브랜치는 새로운 기능 개발 및 버그 수정이 필요할 때마다 develop 브랜치로부터 분기한다.
feature 브랜치에서의 작업은 기본적으로 공유할 필요가 없기 때문에 자신의 로컬 저장소에서 관리한다.
//develop 브랜치에서 생성
 예: $ git checkout -b feature/login develop
 
4. release branch
이번 출시 버전을 준비하는 브랜치
배포를 위한 전용 브랜치를 사용함으로써 한 팀이 해당 배포를 준비하는 동안 다른 팀은 다음 배포를 위한 
기능 개발을 계속할 수 있다. 1팀은 1.2버전을 개발하고, 2팀은 1.3버전을 개발할 수 있다.

5. hotfix branch
출시 버전에서 발생한 버그를 수정하는 브랜치
배포한 버전에 긴급하게 수정을 해야 할 필요가 있을 경우, master 브랜치에서 분기하는 브랜치이다. 

# branch 네이밍 규칙 
어떤 방식으로 브랜치의 이름을 정하는지 브랜치 종류에 따라 살펴보자.

1) master branch, develop branch
master와 develop 브랜치는 본래 이름 그대로 사용하는 경우가 일반적이다.

2) feature branch
어떤 이름도 가능하다. 단, master, develop, release-..., hotfix-... 같은 이름은 사용할 수 없다.

feature/기능요약 형식을 추천한다. ex) feature/login
feature/{issue-number}-{feature-name} 이슈추적을 사용한다면 이와 같은 형식을 따른다.
ex) feature/1-init-project, feature/2-build-gradle-script-write

3) release branch
release-RB_... 또는 release-... 또는 release/...같은 이름이 일반적이다.
release-... 형식을 추천한다. ex) release-1.2

4) hotfix branch
hotfix-... 형식을 추천한다. ex) hotfix-1.2.1

https://gmlwjd9405.github.io/2018/05/11/types-of-git-branch.html
https://velog.io/@kim-jaemin420/Git-branch-naming
